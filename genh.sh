#!/bin/sh

# Script which generate a header which will contain a minimal C code.
# Usage : cf function PrintUsage

# Update 1 : 29/12/2011 on 6:56 PM (replaced the command basename by my own command mybasename).
# Update 2 : 08/01/2012  (append options -v -o and long options too, cf the old genc for the change details).
# Update 3 : 15/01/2012  (append options -h -d and made many changes in the source, like function TryHelp).
# Update 4 : 03/02/2012  (included stdio and stdlib in the .c instead of in the .h)

# Idées de mise à jour : 
#	-créer l'option -f pour forcer l'ecrasement d'un fichier existant par le fichier nouvellement créé.
#  -fusionner les scripts genc et genh en un seul script gen qui prend en compte (entre autres) les arguments -c pour genérer un .c et -h 
#		pour genérer un .h (pourquoi pas aussi -s pour un script shell).
#	-Géneration de modules, ie par ex : 'genm recherche'  crée à la fois le fichier C recherche.c et son header recherche.h, dûment remplis.  
#	-Améliorer la gestion des arguments (idem pour genh) (réflechir à la concaténation des arguments) 
#	-lire en ligne de commande les noms des librairies à inclure dans le header (ex : option -s pour une librarie systeme) et 
#     les inclure dans le header. 
#	- Debugger la fonction TestNameHC (elle donne des résultats cococococoricooooo....) : accepter de generer des fichiers de 
#		la forme -salam.h (ou -salam.h pour genh)

PrintUsage () 
{
	cat << _END_
Usage : `mybasename $0` -? | --help  
	`mybasename $0` [-v | --verbose] [ -h | --include-header] [-d | --date] [-o | --open] CFILE... ...
	Generate a header with a minimal C code.
	
	           -?    --help           :  display this usage and exit.
	           -o    --open           :  open the following file(s) with the text editor gedit.
	           -v    --verbose        :  print each action done by this command.
	           -d    --date           :  print date of generation and name of this command in the generated file.
_END_
}

TryHelp () 
{
	echo "Try '`mybasename $0` --help' for more details."
}

# Test if the argument of the script is a valid header name (ie if it's terminated by .c).
#
TestNameH ()	 # word
{
	header="$1"
	
	if [ "${header#-}" != "$header" -a "${header%.h}" = "$header" ]        # Si l'argument a la forme d'une option (ex : -sol, ou --lire)
	then
		{ echo "`mybasename $0` : invalid option '$header'"; TryHelp; } 1>&2
		exit 1
	elif [ "${header#-}" = "$header" -a "${header%.h}" = "$header" ]        # Si l'argument privé de son eventuelle extension '.c' est egal à l'argument lui-mm, ie si le nom ne se termine pas par .c
	then
		echo "`mybasename $0` : \"$header\" : invalid name for a header. Stop." 1>&2
		return 1
	fi
	
	return 0
}

# Test if the file which will generated exist yet.
#
IsExistH () 	# complete_file_name
{	
	if test "${1%/*}" = "$1"                # Test if the complete name is terminated by "/.."
	then	
		path="."			# Then the folder of creation of the file is the current directory.
	else
		path="${1%/*}"			# Extract the path to the file.
	fi
	filename=`mybasename "$1"`  	# Extract the file name from the complete path of the file, (other method : filename=${1##*/} )
	
	for f in "$path"/*			# Test if $filename exists in the folder $path
	do	
		if test "$f" = "$path/$filename" 		
		then
			echo "`mybasename $0` : the file \"$f\" is already exists." 1>&2
			return 1
		fi
	done
	
	return 0
} 

# Remove the entension '.h', translate on capital letters the header's name and put it between '_' (guard name).
#
GuardName ()	# word
{
	echo "_${1%.h}_" |  tr "[a-z]" "[A-Z]" 
}

# Create the C file if it don't exist yet, else print error and fail.
#
GenerateH ()	# hname  v_flag   d_flag 
{
	IsExistH "$1" || return 1			# Test if the file as argument 1 exist and then the script fail.
	guard="`GuardName \`mybasename "$1"\``"
	
	"$2" && echo "`mybasename $0` : generate \"$1\"..."          # If v_flag=true, then tell what are you doing!!!!!!!
	"$3" && echo -e "/* Header generated by script `mybasename $0` on `date`. */\n" >| "$1"     # If d_flag=true, then print this in the file.
	cat >> "$1" << NIHAYA
#ifndef $guard
#define $guard

#endif  /* $guard */
NIHAYA
}	
	
# Main program
#
if test $# -eq 0                                     
then
	echo "`mybasename $0` :  expected arguments" 1>&2; 
	TryHelp 1>&2; 
	exit 1
fi

#
# Uncoding arguments and execute following actions

d_flag=false
o_flag=false
v_flag=false
while [ $# -ne 0 ]
do      
	case "$1" in
		  -'?' | --help) 
				PrintUsage
				exit 0
				;;
	    
	           -o | --open) 
				[ $# -le 1 ] && { echo "`mybasename $0` : error : expected operand after option '$1'" 1>&2; TryHelp 1>&2; exit 1; }       # Test if the command is : genc ... -o HEADER ...
				o_flag=true;
				shift 
				;;
		
		-v | --verbose)
				[ $# -le 1 ] && { echo "`mybasename $0` : error : expected operand after option '$1'" 1>&2; TryHelp 1>&2; exit 1; }
			    	v_flag=true
			    	shift
			    	;;
		
		   -d | --date)
		   		[ $# -le 1 ] && { echo "`mybasename $0` : error : expected operand after option '$1'" 1>&2; TryHelp 1>&2; exit 1; }
		   		d_flag=true
		   		shift
		   		;;
			     
			     *) 
				TestNameH "$1" || { shift; continue; } 
				GenerateH "$1" $v_flag $d_flag || { shift; continue; }		# Generate the header with the minimal C code.
			     	
			     	$v_flag && $o_flag && echo "`mybasename $0` : open \"$1\" with gedit..."
			     	"$o_flag" && gedit "$1" &
			     	shift             
				;;
			
				
	esac
done

exit 0
